{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/isNativeFunction.js","../node_modules/bnc-onboard/dist/esm/providerEngine-81ff17e9.js","../node_modules/web3-provider-engine/node_modules/eth-json-rpc-errors/src/classes.js","../node_modules/fast-safe-stringify/index.js","../node_modules/web3-provider-engine/node_modules/eth-json-rpc-errors/src/utils.js","../node_modules/web3-provider-engine/subproviders/rpc.js","../node_modules/web3-provider-engine/node_modules/eth-json-rpc-errors/index.js","../node_modules/web3-provider-engine/node_modules/eth-json-rpc-errors/src/errors.js"],"names":["getPrototypeOf","setPrototypeOf","isNativeFunction","construct","_wrapNativeSuper","Class","_cache","Map","undefined","module","exports","TypeError","has","get","set","Wrapper","arguments","this","constructor","prototype","Object","create","value","enumerable","writable","configurable","fn","Function","toString","call","indexOf","createProvider","config","getAccounts","signTransaction","rpcUrl","processMessage","processPersonalMessage","signMessage","signPersonalMessage","idMgmt","HookedWalletSubprovider","rpcSubProvider","RpcSource","includes","concat","provider","Web3ProviderEngine","addProvider","SubscriptionSubprovider","FilterSubprovider","start","safeStringify","require","EthereumRpcError","code","message","data","Number","isInteger","Error","serialized","stack","serialize","stringifyReplacer","EthereumProviderError","isValidEthProviderCode","_","stringify","default","stable","deterministicStringify","stableStringify","arr","replacerStack","obj","replacer","spacer","res","decirc","val","k","parent","i","length","propertyDescriptor","getOwnPropertyDescriptor","defineProperty","push","Array","isArray","keys","key","pop","JSON","replaceGetterValues","part","compareFunction","a","b","tmp","deterministicDecirc","toJSON","sort","v","splice","errorValues","FALLBACK_ERROR_CODE","rpc","internal","FALLBACK_MESSAGE","FALLBACK_ERROR","getMessageFromCode","fallbackMessage","codeString","isJsonRpcServerError","isValidCode","assignOriginalError","error","assign","serializeError","fallbackError","hasOwnProperty","originalError","JSON_RPC_SERVER_ERROR_MESSAGE","xhr","process","browser","inherits","createPayload","Subprovider","ethErrors","opts","handleRequest","payload","next","end","targetUrl","sanitizedPayload","id","jsonrpc","method","params","sanitizePayload","newPayload","uri","headers","body","rejectUnauthorized","timeout","err","statusCode","methodNotFound","msg","parse","console","result","ERROR_CODES","getEthJsonRpcError","validateOpts","getEthProviderError","invalidRequest","invalidParams","server","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","userRejectedRequest","unauthorized","unsupportedMethod","custom"],"mappings":"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","file":"static/js/2.afec17b9.chunk.js","sourcesContent":["var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeFunction = require(\"./isNativeFunction\");\n\nvar construct = require(\"./construct\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;","import Web3ProviderEngine from 'web3-provider-engine';\nimport RpcSource from 'web3-provider-engine/subproviders/rpc';\nimport HookedWalletSubprovider from 'web3-provider-engine/subproviders/hooked-wallet';\nimport SubscriptionSubprovider from 'web3-provider-engine/subproviders/subscriptions';\nimport FilterSubprovider from 'web3-provider-engine/subproviders/filters';\n\nfunction createProvider(config) {\n  var getAccounts = config.getAccounts,\n      signTransaction = config.signTransaction,\n      rpcUrl = config.rpcUrl,\n      processMessage = config.processMessage,\n      processPersonalMessage = config.processPersonalMessage,\n      signMessage = config.signMessage,\n      signPersonalMessage = config.signPersonalMessage;\n  var idMgmt = getAccounts && new HookedWalletSubprovider({\n    getAccounts: getAccounts,\n    signTransaction: signTransaction,\n    processMessage: processMessage,\n    processPersonalMessage: processPersonalMessage,\n    signMessage: signMessage,\n    signPersonalMessage: signPersonalMessage\n  });\n  var rpcSubProvider = new RpcSource({\n    rpcUrl: rpcUrl.includes('http') ? rpcUrl : \"https://\".concat(rpcUrl)\n  });\n  var provider = new Web3ProviderEngine();\n  provider.addProvider(new SubscriptionSubprovider());\n  provider.addProvider(new FilterSubprovider());\n  idMgmt && provider.addProvider(idMgmt);\n  provider.addProvider(rpcSubProvider);\n  provider.start();\n  return provider;\n}\n\nexport default createProvider;","\nconst safeStringify = require('fast-safe-stringify')\n\n/**\n * @class JsonRpcError\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP 1474.\n * Permits any integer error code.\n */\nclass EthereumRpcError extends Error {\n\n  /**\n   * Create an Ethereum JSON RPC error.\n   * \n   * @param {number} code - The integer error code.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor (code, message, data) {\n\n    if (!Number.isInteger(code)) throw new Error(\n      '\"code\" must be an integer.'\n    )\n    if (!message || typeof message !== 'string') throw new Error(\n      '\"message\" must be a nonempty string.'\n    )\n\n    super(message)\n    this.code = code\n    if (data !== undefined) this.data = data\n  }\n\n  /**\n   * Returns a plain object with all public class properties.\n   * \n   * @returns {object} The serialized error. \n   */\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message,\n    }\n    if (this.data !== undefined) serialized.data = this.data\n    if (this.stack) serialized.stack = this.stack\n    return serialized\n  }\n\n  /**\n   * Return a string representation of the serialized error, omitting\n   * any circular references.\n   * \n   * @returns {string} The serialized error as a string.\n   */\n  toString() {\n    return safeStringify(\n      this.serialize(),\n      stringifyReplacer,\n      2\n    )\n  }\n}\n\n/**\n * @class EthereumRpcError\n * Error subclass implementing Ethereum Provider errors per EIP 1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nclass EthereumProviderError extends EthereumRpcError {\n\n  /**\n   * Create an Ethereum JSON RPC error.\n   * \n   * @param {number} code - The integer error code, in the [ 1000 <= 4999 ] range.\n   * @param {string} message - The string message.\n   * @param {any} [data] - The error data.\n   */\n  constructor(code, message, data) {\n\n    if (!isValidEthProviderCode(code)) {\n      throw new Error(\n        '\"code\" must be an integer such that: 1000 <= code <= 4999'\n      )\n    }\n\n    super(code, message, data)\n  }\n}\n\n// Internal\n\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999\n}\n\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return\n  }\n  return value\n}\n\n// Exports\n\nmodule.exports =  {\n  EthereumRpcError,\n  EthereumProviderError\n}\n","module.exports = stringify\nstringify.default = stringify\nstringify.stable = deterministicStringify\nstringify.stableStringify = deterministicStringify\n\nvar arr = []\nvar replacerStack = []\n\n// Regular stringify\nfunction stringify (obj, replacer, spacer) {\n  decirc(obj, '', [], undefined)\n  var res\n  if (replacerStack.length === 0) {\n    res = JSON.stringify(obj, replacer, spacer)\n  } else {\n    res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)\n  }\n  while (arr.length !== 0) {\n    var part = arr.pop()\n    if (part.length === 4) {\n      Object.defineProperty(part[0], part[1], part[3])\n    } else {\n      part[0][part[1]] = part[2]\n    }\n  }\n  return res\n}\nfunction decirc (val, k, stack, parent) {\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)\n        if (propertyDescriptor.get !== undefined) {\n          if (propertyDescriptor.configurable) {\n            Object.defineProperty(parent, k, { value: '[Circular]' })\n            arr.push([parent, k, val, propertyDescriptor])\n          } else {\n            replacerStack.push([val, k])\n          }\n        } else {\n          parent[k] = '[Circular]'\n          arr.push([parent, k, val])\n        }\n        return\n      }\n    }\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        decirc(val[i], i, stack, val)\n      }\n    } else {\n      var keys = Object.keys(val)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        decirc(val[key], key, stack, val)\n      }\n    }\n    stack.pop()\n  }\n}\n\n// Stable-stringify\nfunction compareFunction (a, b) {\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\nfunction deterministicStringify (obj, replacer, spacer) {\n  var tmp = deterministicDecirc(obj, '', [], undefined) || obj\n  var res\n  if (replacerStack.length === 0) {\n    res = JSON.stringify(tmp, replacer, spacer)\n  } else {\n    res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)\n  }\n  while (arr.length !== 0) {\n    var part = arr.pop()\n    if (part.length === 4) {\n      Object.defineProperty(part[0], part[1], part[3])\n    } else {\n      part[0][part[1]] = part[2]\n    }\n  }\n  return res\n}\n\nfunction deterministicDecirc (val, k, stack, parent) {\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)\n        if (propertyDescriptor.get !== undefined) {\n          if (propertyDescriptor.configurable) {\n            Object.defineProperty(parent, k, { value: '[Circular]' })\n            arr.push([parent, k, val, propertyDescriptor])\n          } else {\n            replacerStack.push([val, k])\n          }\n        } else {\n          parent[k] = '[Circular]'\n          arr.push([parent, k, val])\n        }\n        return\n      }\n    }\n    if (typeof val.toJSON === 'function') {\n      return\n    }\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        deterministicDecirc(val[i], i, stack, val)\n      }\n    } else {\n      // Create a temporary object in the required way\n      var tmp = {}\n      var keys = Object.keys(val).sort(compareFunction)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        deterministicDecirc(val[key], key, stack, val)\n        tmp[key] = val[key]\n      }\n      if (parent !== undefined) {\n        arr.push([parent, k, val])\n        parent[k] = tmp\n      } else {\n        return tmp\n      }\n    }\n    stack.pop()\n  }\n}\n\n// wraps replacer function to handle values we couldn't replace\n// and mark them as [Circular]\nfunction replaceGetterValues (replacer) {\n  replacer = replacer !== undefined ? replacer : function (k, v) { return v }\n  return function (key, val) {\n    if (replacerStack.length > 0) {\n      for (var i = 0; i < replacerStack.length; i++) {\n        var part = replacerStack[i]\n        if (part[1] === key && part[0] === val) {\n          val = '[Circular]'\n          replacerStack.splice(i, 1)\n          break\n        }\n      }\n    }\n    return replacer.call(this, key, val)\n  }\n}\n","\nconst errorValues = require('./errorValues.json')\nconst FALLBACK_ERROR_CODE = require('./errorCodes.json').rpc.internal\nconst { EthereumRpcError } = require('./classes')\n\nconst JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.'\n\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.'\n\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n}\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n * \n * @param {number} code - The integer error code\n * @param {string} fallbackMessage - The fallback message\n * @return {string} The corresponding message or the fallback message\n */\nfunction getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {\n\n  if (Number.isInteger(code)) {\n\n    const codeString = code.toString()\n    if (errorValues[codeString]) return errorValues[codeString].message\n\n    if (isJsonRpcServerError(code)) return JSON_RPC_SERVER_ERROR_MESSAGE\n\n    // TODO: allow valid codes and messages to be extended\n    // // EIP 1193 Status Codes\n    // if (code >= 4000 && code <= 4999) return Something?\n  }\n  return fallbackMessage\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n * \n * @param {number} code - The code to check\n * @return {boolean} true if the code is valid, false otherwise.\n */\nfunction isValidCode(code) {\n\n  if (!Number.isInteger(code)) return false\n\n  const codeString = code.toString()\n  if (errorValues[codeString]) return true\n\n  if (isJsonRpcServerError(code)) return true\n\n  // TODO: allow valid codes and messages to be extended\n  // // EIP 1193 Status Codes\n  // if (code >= 4000 && code <= 4999) return true\n\n  return false\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n * Adds a 'stack' property if it exists on the given error.\n *\n * @param {any} error - The error to serialize.\n * @param {object} fallbackError - The custom fallback error values if the\n * given error is invalid.\n * @return {object} A standardized error object.\n */\nfunction serializeError (error, fallbackError = FALLBACK_ERROR) {\n\n  if (\n    !fallbackError || \n    !Number.isInteger(fallbackError.code) ||\n    typeof fallbackError.message !== 'string'\n  ) {\n    throw new Error(\n      'fallbackError must contain integer number code and string message.'\n    )\n  }\n\n  if (error instanceof EthereumRpcError) {\n    return error.serialize()\n  }\n\n  const serialized = {}\n\n  if (error && isValidCode(error.code)) {\n\n    serialized.code = error.code\n\n    if (error.message && typeof error.message === 'string') {\n      serialized.message = error.message\n      if (error.hasOwnProperty('data')) serialized.data = error.data\n    } else {\n      serialized.message = getMessageFromCode(serialized.code)\n      serialized.data = { originalError: assignOriginalError(error) }\n    }\n\n  } else {\n    serialized.code = fallbackError.code\n    serialized.message = (\n      error && error.message\n        ? error.message\n        : fallbackError.message\n    )\n    serialized.data = { originalError: assignOriginalError(error) }\n  }\n\n  if (error && error.stack) serialized.stack = error.stack\n  return serialized\n}\n\n// Internal\n\nfunction isJsonRpcServerError (code) {\n  return code >= -32099 && code <= -32000\n}\n\nfunction assignOriginalError (error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error)\n  }\n  return error\n}\n\n// Exports\n\nmodule.exports = {\n  getMessageFromCode,\n  isValidCode,\n  serializeError,\n  JSON_RPC_SERVER_ERROR_MESSAGE,\n}\n","const xhr = process.browser ? require('xhr') : require('request')\nconst inherits = require('util').inherits\nconst createPayload = require('../util/create-payload.js')\nconst Subprovider = require('./subprovider.js')\nconst { ethErrors, serializeError } = require('eth-json-rpc-errors')\n\n\nmodule.exports = RpcSource\n\ninherits(RpcSource, Subprovider)\n\nfunction RpcSource(opts) {\n  const self = this\n  self.rpcUrl = opts.rpcUrl\n}\n\nRpcSource.prototype.handleRequest = function(payload, next, end){\n  const self = this\n  const targetUrl = self.rpcUrl\n\n  // overwrite id to conflict with other concurrent users\n  const sanitizedPayload = sanitizePayload(payload)\n  const newPayload = createPayload(sanitizedPayload)\n\n  xhr({\n    uri: targetUrl,\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newPayload),\n    rejectUnauthorized: false,\n    timeout: 20000,\n  }, function(err, res, body) {\n    if (err) return end(serializeError(err))\n\n    // check for error code\n    switch (res.statusCode) {\n      case 405:\n        return end(ethErrors.rpc.methodNotFound())\n      case 504: // Gateway timeout\n        return (function(){\n          let msg = `Gateway timeout. The request took too long to process. `\n          msg += `This can happen when querying logs over too wide a block range.`\n          const err = new Error(msg)\n          return end(serializeError(err))\n        })()\n      case 429: // Too many requests (rate limiting)\n        return (function(){\n          const err = new Error(`Too Many Requests`)\n          return end(serializeError(err))\n        })()\n      default:\n        if (res.statusCode != 200) {\n          const msg = 'Unknown Error: ' + res.body\n          const err = new Error(msg)\n          return end(serializeError(err))\n        }\n    }\n\n    // parse response\n    let data\n    try {\n      data = JSON.parse(body)\n    } catch (err) {\n      console.error(err.stack)\n      return end(serializeError(err))\n    }\n    if (data.error) return end(data.error)\n\n    end(null, data.result)\n  })\n}\n\n// drops any non-standard params\nfunction sanitizePayload (payload) {\n  return {\n    id: payload.id,\n    jsonrpc: payload.jsonrpc,\n    method: payload.method,\n    params: payload.params,\n  }\n}","\nconst { EthereumRpcError, EthereumProviderError } = require('./src/classes')\nconst {\n  serializeError, getMessageFromCode,\n} = require('./src/utils')\nconst ethErrors = require('./src/errors')\nconst ERROR_CODES = require('./src/errorCodes.json')\n\nmodule.exports = {\n  ethErrors,\n  EthereumRpcError,\n  EthereumProviderError,\n  serializeError,\n  getMessageFromCode,\n  /** @type ErrorCodes */\n  ERROR_CODES,\n}\n\n// Types\n\n/**\n * @typedef {Object} EthereumProviderErrorCodes\n * @property {number} userRejectedRequest\n * @property {number} unauthorized\n * @property {number} unsupportedMethod\n */\n\n/**\n * @typedef {Object} EthereumRpcErrorCodes\n * @property {number} parse\n * @property {number} invalidRequest\n * @property {number} invalidParams\n * @property {number} methodNotFound\n * @property {number} internal\n * @property {number} invalidInput\n * @property {number} resourceNotFound\n * @property {number} resourceUnavailable\n * @property {number} transactionRejected\n * @property {number} methodNotSupported\n */\n\n/**\n * @typedef ErrorCodes\n * @property {EthereumRpcErrorCodes} rpc\n * @property {EthereumProviderErrorCodes} provider\n */\n","\nconst { EthereumRpcError, EthereumProviderError } = require('./classes')\nconst { getMessageFromCode } = require('./utils')\nconst ERROR_CODES = require('./errorCodes.json')\n\nmodule.exports = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    parse: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.parse, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidRequest: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidRequest, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidParams: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidParams, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotFound: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.methodNotFound, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    internal: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.internal, opts\n    ),\n\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP 1474.\n     * \n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    server: (opts) => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.')\n      }\n      const { code } = opts\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error(\n          '\"code\" must be an integer such that: -32099 <= code <= -32005'\n        )\n      }\n      return getEthJsonRpcError(code, opts)\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    invalidInput: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.invalidInput, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceNotFound: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.resourceNotFound, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    resourceUnavailable: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.resourceUnavailable, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    transactionRejected: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.transactionRejected, opts\n    ),\n\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumRpcError} The error\n     */\n    methodNotSupported: (opts) => getEthJsonRpcError(\n      ERROR_CODES.rpc.methodNotSupported, opts\n    ),\n  },\n\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    userRejectedRequest: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.userRejectedRequest, opts\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unauthorized: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.unauthorized, opts\n      )\n    },\n\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     * \n     * @param {Object|string} [opts] - Options object or error message string\n     * @param {string} [opts.message] - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    unsupportedMethod: (opts) => {\n      return getEthProviderError(\n        ERROR_CODES.provider.unsupportedMethod, opts\n      )\n    },\n\n    /**\n     * Get a custom Ethereum Provider error.\n     * \n     * @param {Object|string} opts - Options object\n     * @param {number} opts.code - The error code\n     * @param {string} opts.message - The error message\n     * @param {any} [opts.data] - Error data\n     * @returns {EthereumProviderError} The error\n     */\n    custom: (opts) => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.')\n      }\n      const { code, message, data } = opts\n      if (!message || typeof message !== 'string') throw new Error(\n        '\"message\" must be a nonempty string'\n      )\n      return new EthereumProviderError(code, message, data)\n    },\n  },\n}\n\n// Internal\n\nfunction getEthJsonRpcError(code, opts) {\n  const [ message, data ] = validateOpts(opts)\n  return new EthereumRpcError(\n    code,\n    message || getMessageFromCode(code),\n    data\n  )\n}\n\nfunction getEthProviderError(code, opts) {\n  const [ message, data ] = validateOpts(opts)\n  return new EthereumProviderError(\n    code,\n    message || getMessageFromCode(code),\n    data\n  )\n}\n\nfunction validateOpts (opts) {\n  let message, data\n  if (opts) {\n    if (typeof opts === 'string') {\n      message = opts\n    } else if (typeof opts === 'object' && !Array.isArray(opts)) {\n      message = opts.message\n      data = opts.data\n    }\n  }\n  return [ message, data ]\n}\n"],"sourceRoot":""}